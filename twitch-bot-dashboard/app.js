// --- –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
document.addEventListener('DOMContentLoaded', () => {
  const voiceForm = document.getElementById('voiceForm');
  const voiceUserId = document.getElementById('voiceUserId');
  const voiceCommand = document.getElementById('voiceCommand');
  const voiceResult = document.getElementById('voiceResult');
  if (voiceForm && voiceUserId && voiceCommand && voiceResult) {
    voiceForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      voiceResult.textContent = '';
      const userId = voiceUserId.value.trim();
      const command = voiceCommand.value;
      if (!userId || !command) {
        voiceResult.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.';
        return;
      }
      voiceResult.innerHTML = '<em>–ó–∞–ø—Ä–æ—Å...</em>';
      try {
        const res = await fetch('/api/voice/command', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, command })
        });
        const data = await res.json();
        if (data.success) {
          voiceResult.innerHTML = `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> ${data.result}`;
        } else {
          voiceResult.innerHTML = '<span style="color:#f43">–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>';
        }
      } catch (e) {
        voiceResult.innerHTML = '<span style="color:#f43">–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞</span>';
      }
    });
  }
});
// --- AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
document.addEventListener('DOMContentLoaded', () => {
  const aiForm = document.getElementById('aiRecommendForm');
  const aiUserId = document.getElementById('aiUserId');
  const aiResult = document.getElementById('aiRecommendResult');
  if (aiForm && aiUserId && aiResult) {
    aiForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      aiResult.textContent = '';
      const userId = aiUserId.value.trim();
      if (!userId) {
        aiResult.textContent = '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
        return;
      }
      aiResult.innerHTML = '<em>–ó–∞–ø—Ä–æ—Å...</em>';
      try {
        const res = await fetch(`/api/notifications/ai-recommend/${userId}`);
        const data = await res.json();
        if (data.error) {
          aiResult.innerHTML = `<span style="color:#f43">${data.error}</span>`;
        } else {
          aiResult.innerHTML = `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> ${data.recommendation}<br>
            <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> ${data.forecast}<br>
            <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${data.stats.warnCount}, –û—à–∏–±–æ–∫: ${data.stats.errorCount}, –ù–æ–≤—ã—Ö: ${data.stats.newCount}`;
        }
      } catch (e) {
        aiResult.innerHTML = '<span style="color:#f43">–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞</span>';
      }
    });
  }
});
// --- Drag-and-drop, –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
document.addEventListener('DOMContentLoaded', () => {
  const sortableList = document.getElementById('notificationSortableList');
  const searchInput = document.getElementById('notificationSearch');
  const statusFilter = document.getElementById('notificationStatusFilter');
  const typeFilter = document.getElementById('notificationTypeFilter');

  let notifications = [];

  async function loadNotifications() {
    const res = await fetch('/api/notifications');
    notifications = await res.json();
    renderNotifications();
  }

  function renderNotifications() {
    let filtered = notifications;
    const search = searchInput.value.trim().toLowerCase();
    const status = statusFilter.value;
    const type = typeFilter.value;
    if (search) filtered = filtered.filter(n => (n.title || n.message || '').toLowerCase().includes(search));
    if (status) filtered = filtered.filter(n => n.status === status);
    if (type) filtered = filtered.filter(n => n.type === type);
    sortableList.innerHTML = filtered.length ?
      `<ul id="sortableUl">${filtered.map(n => `<li draggable="true" data-id="${n.id}" class="sortable-item"><b>${n.title || n.message}</b> <span style="color:#888">[${n.status}]</span></li>`).join('')}</ul>` :
      '<em>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</em>';
  }

  searchInput && searchInput.addEventListener('input', renderNotifications);
  statusFilter && statusFilter.addEventListener('change', renderNotifications);
  typeFilter && typeFilter.addEventListener('change', renderNotifications);

  // Drag-and-drop —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  sortableList && sortableList.addEventListener('dragstart', (e) => {
    if (e.target.classList.contains('sortable-item')) {
      e.dataTransfer.setData('text/plain', e.target.dataset.id);
    }
  });
  sortableList && sortableList.addEventListener('dragover', (e) => {
    e.preventDefault();
    if (e.target.classList.contains('sortable-item')) {
      e.target.style.background = '#e0e7ff';
    }
  });
  sortableList && sortableList.addEventListener('dragleave', (e) => {
    if (e.target.classList.contains('sortable-item')) {
      e.target.style.background = '';
    }
  });
  sortableList && sortableList.addEventListener('drop', (e) => {
    e.preventDefault();
    if (e.target.classList.contains('sortable-item')) {
      e.target.style.background = '';
      const draggedId = e.dataTransfer.getData('text/plain');
      const targetId = e.target.dataset.id;
      const draggedIdx = notifications.findIndex(n => n.id == draggedId);
      const targetIdx = notifications.findIndex(n => n.id == targetId);
      if (draggedIdx > -1 && targetIdx > -1 && draggedIdx !== targetIdx) {
        const moved = notifications.splice(draggedIdx, 1)[0];
        notifications.splice(targetIdx, 0, moved);
        renderNotifications();
        // TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      }
    }
  });

  loadNotifications();
});
// --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ Health-check: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
document.addEventListener('DOMContentLoaded', () => {
  const healthStatus = document.getElementById('healthStatus');
  const monitoringMetrics = document.getElementById('monitoringMetrics');

  async function loadHealth() {
    if (!healthStatus) return;
    healthStatus.innerHTML = '<em>–ü—Ä–æ–≤–µ—Ä–∫–∞...</em>';
    try {
      const res = await fetch('/api/health');
      const data = await res.json();
      healthStatus.innerHTML = `<b>–°—Ç–∞—Ç—É—Å:</b> ${data.status === 'ok' ? 'üü¢ OK' : 'üî¥ ERROR'}<br>
        <b>Uptime:</b> ${data.uptime}s<br>
        <b>DB:</b> ${data.db === 'ok' ? 'üü¢' : 'üî¥'}<br>
        <b>Memory:</b> RSS ${Math.round(data.memory.rss/1024/1024)} MB<br>
        <b>Load:</b> ${data.load.map(l => l.toFixed(2)).join(', ')}<br>
        <b>Time:</b> ${data.timestamp}`;
    } catch (e) {
      healthStatus.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
    }
  }

  async function loadMonitoring() {
    if (!monitoringMetrics) return;
    monitoringMetrics.innerHTML = '<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>';
    try {
      const res = await fetch('/api/monitoring');
      const data = await res.json();
      monitoringMetrics.innerHTML = `<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> ${data.notifications}<br>
        <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${data.users}<br>
        <b>–û—à–∏–±–æ–∫:</b> ${data.errors}<br>
        <b>Time:</b> ${data.timestamp}`;
    } catch (e) {
      monitoringMetrics.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
    }
  }

  function autoUpdate() {
    loadHealth();
    loadMonitoring();
    setTimeout(autoUpdate, 10000);
  }
  autoUpdate();
});
// --- Email –æ—Ç—á—ë—Ç—ã: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
document.addEventListener('DOMContentLoaded', () => {
  const emailReportForm = document.getElementById('emailReportForm');
  const emailReportEmail = document.getElementById('emailReportEmail');
  const emailReportSubject = document.getElementById('emailReportSubject');
  const emailReportBody = document.getElementById('emailReportBody');
  const emailReportResult = document.getElementById('emailReportResult');
  const emailReportHistory = document.getElementById('emailReportHistory');

  async function loadEmailReportHistory() {
    emailReportHistory.innerHTML = '<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>';
    try {
      const res = await fetch('/api/report/email/history');
      const data = await res.json();
      if (Array.isArray(data)) {
        emailReportHistory.innerHTML = data.length ?
          `<ul>${data.map(r => `<li><b>${r.email}</b> <span style="color:#888">${r.subject}</span> <span>${r.status === 'sent' ? '‚úîÔ∏è' : '‚ùå'}</span> <span style="color:#f43">${r.error || ''}</span></li>`).join('')}</ul>` :
          '<em>–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–æ–∫</em>';
      } else {
        emailReportHistory.innerHTML = '<em>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</em>';
      }
    } catch (e) {
      emailReportHistory.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
    }
  }

  emailReportForm && emailReportForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    emailReportResult.textContent = '';
    const email = emailReportEmail.value.trim();
    const subject = emailReportSubject.value.trim();
    const body = emailReportBody.value.trim();
    if (!email || !subject || !body) {
      emailReportResult.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.';
      return;
    }
    try {
      const res = await fetch('/api/report/email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, subject, body })
      });
      const data = await res.json();
      if (data.success) {
        emailReportResult.textContent = '–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.';
        emailReportForm.reset();
        loadEmailReportHistory();
      } else {
        emailReportResult.textContent = data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.';
      }
    } catch (e) {
      emailReportResult.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
    }
  });

  loadEmailReportHistory();
});
// --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
document.addEventListener('DOMContentLoaded', () => {
  const schedulerForm = document.getElementById('schedulerForm');
  const schedulerTitle = document.getElementById('schedulerTitle');
  const schedulerMessage = document.getElementById('schedulerMessage');
  const schedulerUserId = document.getElementById('schedulerUserId');
  const schedulerCron = document.getElementById('schedulerCron');
  const schedulerResult = document.getElementById('schedulerResult');
  const schedulerList = document.getElementById('schedulerList');

  async function loadScheduler() {
    schedulerList.innerHTML = '<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>';
    try {
      const res = await fetch('/api/scheduler');
      const data = await res.json();
      if (Array.isArray(data)) {
        schedulerList.innerHTML = data.length ?
          `<ul>${data.map(job => `<li><b>${job.title}</b> <span style="color:#888">${job.cron}</span> <span>${job.message}</span> <button data-id="${job.id}" class="scheduler-delete">–£–¥–∞–ª–∏—Ç—å</button></li>`).join('')}</ul>` :
          '<em>–ù–µ—Ç –∑–∞–¥–∞—á</em>';
      } else {
        schedulerList.innerHTML = '<em>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</em>';
      }
    } catch (e) {
      schedulerList.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
    }
  }

  schedulerForm && schedulerForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    schedulerResult.textContent = '';
    const title = schedulerTitle.value.trim();
    const message = schedulerMessage.value.trim();
    const user_id = schedulerUserId.value.trim();
    const cron = schedulerCron.value.trim();
    if (!title || !message || !cron) {
      schedulerResult.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.';
      return;
    }
    try {
      const res = await fetch('/api/scheduler', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, message, user_id, cron })
      });
      const data = await res.json();
      if (data.success) {
        schedulerResult.textContent = '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.';
        schedulerForm.reset();
        loadScheduler();
      } else {
        schedulerResult.textContent = data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.';
      }
    } catch (e) {
      schedulerResult.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
    }
  });

  schedulerList && schedulerList.addEventListener('click', async (e) => {
    if (e.target.classList.contains('scheduler-delete')) {
      const id = e.target.getAttribute('data-id');
      if (id) {
        try {
          const res = await fetch(`/api/scheduler/${id}`, { method: 'DELETE' });
          const data = await res.json();
          if (data.success) {
            schedulerResult.textContent = '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.';
            loadScheduler();
          } else {
            schedulerResult.textContent = data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.';
          }
        } catch (e) {
          schedulerResult.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
        }
      }
    }
  });

  loadScheduler();
});
// --- –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API ---
document.addEventListener('DOMContentLoaded', () => {
  const mobilePanel = document.getElementById('mobileNotificationsPanel');
  const mobileList = document.getElementById('mobileNotificationsList');
  if (mobilePanel && mobileList) {
    async function loadMobileNotifications() {
      mobileList.innerHTML = '<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>';
      try {
        const res = await fetch('/api/mobile/notifications');
        const data = await res.json();
        if (Array.isArray(data)) {
          mobileList.innerHTML = data.length ?
            `<ul>${data.map(n => `<li><b>${n.title || n.message}</b> <span style="color:#888">[${n.status}]</span></li>`).join('')}</ul>` :
            '<em>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</em>';
        } else {
          mobileList.innerHTML = '<em>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</em>';
        }
      } catch (e) {
        mobileList.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
      }
    }
    loadMobileNotifications();
  }
});
// --- Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Slack, Teams) ---
document.addEventListener('DOMContentLoaded', () => {
  const webhookForm = document.getElementById('webhookForm');
  const webhookType = document.getElementById('webhookType');
  const webhookUrl = document.getElementById('webhookUrl');
  const webhookResult = document.getElementById('webhookResult');
  const webhookList = document.getElementById('webhookList');

  async function loadWebhooks() {
    webhookList.innerHTML = '<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>';
    try {
      const res = await fetch('/api/integration/webhook');
      const data = await res.json();
      if (Array.isArray(data)) {
        webhookList.innerHTML = data.length ?
          `<ul>${data.map(w => `<li><b>${w.type}</b>: <span>${w.url}</span></li>`).join('')}</ul>` :
          '<em>–ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</em>';
      } else {
        webhookList.innerHTML = '<em>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</em>';
      }
    } catch (e) {
      webhookList.innerHTML = '<em>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</em>';
    }
  }

  webhookForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    webhookResult.textContent = '';
    const type = webhookType.value;
    const url = webhookUrl.value.trim();
    if (!url) {
      webhookResult.textContent = '–í–≤–µ–¥–∏—Ç–µ URL webhook.';
      return;
    }
    try {
      const res = await fetch('/api/integration/webhook', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, url })
      });
      const data = await res.json();
      if (data.success) {
        webhookResult.textContent = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.';
        webhookUrl.value = '';
        loadWebhooks();
      } else {
        webhookResult.textContent = data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.';
      }
    } catch (e) {
      webhookResult.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
    }
  });

  loadWebhooks();
});
// --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ (i18n) ---
window.addEventListener('DOMContentLoaded', () => {
  const langSelect = document.getElementById('langSelect');
  const translations = {
    en: {
      '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞': 'Dark theme',
      '–Ø–∑—ã–∫': 'Language',
      'AI-—Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç—Ç–æ–∫–∞': 'AI Trends & Churn Forecast',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã': 'Show Trends',
      '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞': 'Show Churn Forecast',
      'AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º': 'AI Recommendations by Segment',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': 'Show Recommendations',
      '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)': 'Two-Factor Authentication (2FA)',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å 2FA': 'Setup 2FA',
      '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥': 'Verify Code',
      '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'Feedback & Support',
      '–û—Ç–ø—Ä–∞–≤–∏—Ç—å': 'Send',
      'FAQ': 'FAQ',
      '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫': 'Event & Error Notifications',
      '–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': 'Load Notifications',
      'BI-–æ—Ç—á—ë—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã': 'BI Reports & Filters',
      '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç—ã': 'Show Reports',
      '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å': 'Export',
      '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫': 'Auto Campaign Optimization',
      '–ü–æ–∫–∞–∑–∞—Ç—å A/B –æ—Ç—á—ë—Ç—ã': 'Show A/B Reports',
      '–ó–∞–ø—É—Å—Ç–∏—Ç—å AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é': 'Run AI Optimization',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM/ERP —Å–∏—Å—Ç–µ–º–∞–º–∏': 'CRM/ERP Integration',
      '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö': 'Export Data',
      '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ': 'Import Data',
      'Drag-and-drop —Ä–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤': 'Drag-and-drop Template & Segment Editor',
      '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è': 'Save Changes',
      '–ò—Å—Ç–æ—Ä–∏—è –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': 'Audit History',
      '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞—É–¥–∏—Ç–∞': 'Load Audit History',
      '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π': 'Correlation Heatmap',
      '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É': 'Load Heatmap',
      '–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤': 'Network Graph',
      '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π': 'Load Network Graph'
    },
    ru: {}
  };
  function localize(lang) {
    document.querySelectorAll('h2, h3, label, button').forEach(el => {
      const txt = el.textContent.trim();
      if (translations[lang][txt]) el.textContent = translations[lang][txt];
      if (lang === 'ru' && translations['en'][txt]) el.textContent = txt;
    });
  }
  if (langSelect) {
    langSelect.onchange = () => {
      localStorage.setItem('lang', langSelect.value);
      localize(langSelect.value);
    };
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const lang = localStorage.getItem('lang') || 'ru';
    langSelect.value = lang;
    localize(lang);
  }
});
// --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç—ë–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã ---
window.addEventListener('DOMContentLoaded', () => {
  const themeToggle = document.getElementById('themeToggle');
  if (themeToggle) {
    themeToggle.onchange = () => {
      if (themeToggle.checked) {
        document.body.classList.add('dark-theme');
        localStorage.setItem('theme', 'dark');
      } else {
        document.body.classList.remove('dark-theme');
        localStorage.setItem('theme', 'light');
      }
    };
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (localStorage.getItem('theme') === 'dark') {
      themeToggle.checked = true;
      document.body.classList.add('dark-theme');
    }
  }
});
// --- AI-—Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç—Ç–æ–∫–∞ ---
window.addEventListener('DOMContentLoaded', () => {
  const panel = document.getElementById('aiTrendsPanel');
  if (panel) {
    const trendsBtn = document.getElementById('loadTrendsBtn');
    const churnBtn = document.getElementById('loadChurnBtn');
    const trendsResult = document.getElementById('aiTrendsResult');
    const churnResult = document.getElementById('aiChurnResult');

    if (trendsBtn) trendsBtn.onclick = async () => {
      trendsResult.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤...';
      const res = await fetch('/api/analytics/trends');
      const data = await res.json();
      if (data.trends && data.trends.length) {
        trendsResult.innerHTML = '<ul>' + data.trends.map(t => `<li><b>${t.channel}</b> / <b>${t.segment}</b>: ${t.trend} (${t.value}) –∑–∞ ${t.period}</li>`).join('') + '</ul>';
      } else {
        trendsResult.textContent = '–ù–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤.';
      }
    };

    if (churnBtn) churnBtn.onclick = async () => {
      churnResult.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç—Ç–æ–∫–∞...';
      const res = await fetch('/api/analytics/churn');
      const data = await res.json();
      if (data.churn && data.churn.length) {
        churnResult.innerHTML = '<ul>' + data.churn.map(c => `<li><b>${c.segment}</b>: ${c.forecast}</li>`).join('') + '</ul>';
      } else {
        churnResult.textContent = '–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞.';
      }
    };
  }
});
// --- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  const panel = document.getElementById('segmentAIRecommendPanel');
  if (panel) {
    const select = document.getElementById('segmentAISelect');
    const btn = document.getElementById('loadSegmentAIRecommendBtn');
    const resultDiv = document.getElementById('segmentAIRecommendResult');
    if (btn) btn.onclick = async () => {
      resultDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...';
      const segment = select.value;
      const res = await fetch(`/api/notifications/ai-recommend/segment?segment=${encodeURIComponent(segment)}`);
      const data = await res.json();
      if (data.recommendations && data.recommendations.length) {
        resultDiv.innerHTML = '<ul>' + data.recommendations.map(r => `<li><b>${r.type}</b>: ${r.text}</li>`).join('') + '</ul>';
      } else {
        resultDiv.textContent = '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.';
      }
    };
  }
});
// --- –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  const panel = document.getElementById('admin2faPanel');
  if (panel) {
    const setupBtn = document.getElementById('setup2faBtn');
    const setupResult = document.getElementById('setup2faResult');
    const verifyForm = document.getElementById('verify2faForm');
    const verifyToken = document.getElementById('verify2faToken');
    const verifyResult = document.getElementById('verify2faResult');

    if (setupBtn) setupBtn.onclick = async () => {
      setupResult.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞...';
      const res = await fetch('/api/auth/2fa/setup');
      const data = await res.json();
      if (data.qr) {
        setupResult.innerHTML = `<div>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Google Authenticator:</div><img src="${data.qr}" style="margin:1em 0;max-width:220px;">`;
      } else {
        setupResult.textContent = '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.';
      }
    };

    if (verifyForm) verifyForm.onsubmit = async (e) => {
      e.preventDefault();
      const token = verifyToken.value.trim();
      if (!token) {
        verifyResult.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥.';
        return;
      }
      verifyResult.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
      const res = await fetch('/api/auth/2fa/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token })
      });
      const data = await res.json();
      verifyResult.textContent = data.success ? '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, 2FA –∞–∫—Ç–∏–≤–µ–Ω.' : '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.';
      verifyForm.reset();
    };
  }
});
// --- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, FAQ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ---
window.addEventListener('DOMContentLoaded', () => {
  const supportPanel = document.getElementById('supportPanel');
  if (supportPanel) {
    const feedbackForm = document.getElementById('feedbackForm');
    const feedbackText = document.getElementById('feedbackText');
    const feedbackResult = document.getElementById('feedbackResult');
    const faqList = document.getElementById('faqList');

    if (feedbackForm) feedbackForm.onsubmit = async (e) => {
      e.preventDefault();
      const text = feedbackText.value.trim();
      if (!text) {
        feedbackResult.textContent = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–∑—ã–≤.';
        return;
      }
      feedbackResult.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
      const res = await fetch('/api/support/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text })
      });
      const data = await res.json();
      feedbackResult.textContent = data.success ? '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.';
      feedbackForm.reset();
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ FAQ
    async function loadFAQ() {
      const res = await fetch('/api/support/faq');
      const data = await res.json();
      if (data.faq && data.faq.length) {
        faqList.innerHTML = '<ul>' + data.faq.map(f => `<li><b>${f.q}</b><br>${f.a}</li>`).join('') + '</ul>';
      } else {
        faqList.textContent = 'FAQ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
      }
    }
    loadFAQ();
  }
});
// --- BI-–æ—Ç—á—ë—Ç—ã, —Ñ–∏–ª—å—Ç—Ä—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç ---
window.addEventListener('DOMContentLoaded', () => {
  const biPanel = document.getElementById('biReportsPanel');
  if (biPanel) {
    const resultDiv = document.getElementById('biReportsResult');
    const channelFilter = document.getElementById('biChannelFilter');
    const segmentFilter = document.getElementById('biSegmentFilter');
    const loadBtn = document.getElementById('loadBIReportsBtn');
    const exportBtn = document.getElementById('exportBIReportsBtn');

    if (loadBtn) loadBtn.onclick = async () => {
      resultDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ BI-–æ—Ç—á—ë—Ç–æ–≤...';
      const params = new URLSearchParams();
      if (channelFilter.value) params.append('channel', channelFilter.value);
      if (segmentFilter.value) params.append('segment', segmentFilter.value);
      const res = await fetch('/api/bi/reports?' + params.toString());
      const data = await res.json();
      if (data.reports && data.reports.length) {
        resultDiv.innerHTML = '<ul>' + data.reports.map(r => `<li><b>${r.channel}</b> / <b>${r.segment}</b>: ${r.stats} <span style="color:#888">${r.date}</span></li>`).join('') + '</ul>';
      } else {
        resultDiv.textContent = '–ù–µ—Ç BI-–æ—Ç—á—ë—Ç–æ–≤.';
      }
    };

    if (exportBtn) exportBtn.onclick = async () => {
      resultDiv.textContent = '–≠–∫—Å–ø–æ—Ä—Ç BI-–æ—Ç—á—ë—Ç–æ–≤...';
      const params = new URLSearchParams();
      if (channelFilter.value) params.append('channel', channelFilter.value);
      if (segmentFilter.value) params.append('segment', segmentFilter.value);
      const res = await fetch('/api/bi/export?' + params.toString());
      if (res.ok) {
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'bi_reports.json';
        document.body.appendChild(a);
        a.click();
        a.remove();
        resultDiv.textContent = 'BI-–æ—Ç—á—ë—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.';
      } else {
        resultDiv.textContent = '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.';
      }
    };
  }
});
// --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫: AI –∏ A/B –æ—Ç—á—ë—Ç—ã ---
window.addEventListener('DOMContentLoaded', () => {
  const optimizePanel = document.getElementById('autoOptimizePanel');
  if (optimizePanel) {
    const resultDiv = document.getElementById('autoOptimizeResult');
    const abBtn = document.getElementById('loadABReportsBtn');
    const aiBtn = document.getElementById('runAIOptimizeBtn');

    if (abBtn) abBtn.onclick = async () => {
      resultDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ A/B –æ—Ç—á—ë—Ç–æ–≤...';
      const res = await fetch('/api/notifications/ab-reports');
      const data = await res.json();
      if (data.reports && data.reports.length) {
        resultDiv.innerHTML = '<ul>' + data.reports.map(r => `<li><b>${r.segment}</b>: ${r.result} <span style="color:#888">${r.date}</span></li>`).join('') + '</ul>';
      } else {
        resultDiv.textContent = '–ù–µ—Ç A/B –æ—Ç—á—ë—Ç–æ–≤.';
      }
    };

    if (aiBtn) aiBtn.onclick = async () => {
      resultDiv.textContent = 'AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...';
      const res = await fetch('/api/notifications/ai-optimize');
      const data = await res.json();
      if (data.success && data.recommendation) {
        resultDiv.innerHTML = `<div style='color:green'><b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> ${data.recommendation}</div>`;
      } else {
        resultDiv.textContent = '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.';
      }
    };
  }
});
// --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM/ERP: —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ---
window.addEventListener('DOMContentLoaded', () => {
  const integrationPanel = document.getElementById('integrationPanel');
  if (integrationPanel) {
    const resultDiv = document.getElementById('integrationResult');
    const exportBtn = document.getElementById('exportDataBtn');
    const importBtn = document.getElementById('importDataBtn');
    const importInput = document.getElementById('importDataInput');

    if (exportBtn) exportBtn.onclick = async () => {
      resultDiv.textContent = '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...';
      const res = await fetch('/api/integration/export');
      if (res.ok) {
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'exported_data.json';
        document.body.appendChild(a);
        a.click();
        a.remove();
        resultDiv.textContent = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.';
      } else {
        resultDiv.textContent = '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.';
      }
    };

    if (importBtn) importBtn.onclick = async () => {
      if (!importInput.files.length) {
        resultDiv.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.';
        return;
      }
      const file = importInput.files[0];
      const formData = new FormData();
      formData.append('file', file);
      resultDiv.textContent = '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...';
      const res = await fetch('/api/integration/import', {
        method: 'POST',
        body: formData
      });
      const data = await res.json();
      resultDiv.textContent = data.success ? '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.' : '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞.';
    };
  }
});
// --- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫ ---
window.addEventListener('DOMContentLoaded', () => {
  const notifPanel = document.getElementById('notificationsPanel');
  if (notifPanel) {
    const resultDiv = document.getElementById('notificationsResult');
    const loadBtn = document.getElementById('loadNotificationsBtn');
    if (loadBtn) loadBtn.onclick = async () => {
      resultDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
      const res = await fetch('/api/notifications/events');
      const data = await res.json();
      if (data.events && data.events.length) {
        resultDiv.innerHTML = '<ul>' + data.events.map(e => `<li><b>${e.type}</b>: ${e.text} <span style="color:#888">${e.created_at}</span></li>`).join('') + '</ul>';
      } else {
        resultDiv.textContent = '–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.';
      }
    };
  }
});
// --- AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
window.addEventListener('DOMContentLoaded', () => {
  const aiPanel = document.getElementById('aiAnalyticsPanel');
  if (aiPanel) {
    const resultDiv = document.getElementById('aiAnalyticsResult');
    const loadBtn = document.getElementById('loadAIAnalyticsBtn');
    if (loadBtn) loadBtn.onclick = async () => {
      resultDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
      const res = await fetch('/api/notifications/ai-recommend');
      const data = await res.json();
      if (data.recommendations && data.recommendations.length) {
        resultDiv.innerHTML = '<ul>' + data.recommendations.map(r => `<li><b>${r.type}</b>: ${r.text}</li>`).join('') + '</ul>';
      } else {
        resultDiv.textContent = '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.';
      }
    };
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: heatmap –∏ network graph ---
window.addEventListener('DOMContentLoaded', () => {
  // --- Heatmap –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π ---
  const heatmapPanel = document.getElementById('correlationHeatmapPanel');
  if (heatmapPanel) {
    const heatmapCanvas = document.getElementById('correlationHeatmap');
    const loadBtn = document.getElementById('loadHeatmapBtn');
    const resultDiv = document.getElementById('heatmapResult');
    if (loadBtn) loadBtn.onclick = async () => {
      const res = await fetch('/api/notifications/stats/correlations');
      const data = await res.json();
      if (data.matrix && data.labels) {
        resultDiv.textContent = '';
        renderHeatmap(heatmapCanvas, data.matrix, data.labels);
      } else {
        resultDiv.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã.';
      }
    };
  }

  // --- Network graph —Å–≤—è–∑–µ–π ---
  const networkPanel = document.getElementById('networkGraphPanel');
  if (networkPanel) {
    const networkDiv = document.getElementById('networkGraph');
    const loadBtn = document.getElementById('loadNetworkGraphBtn');
    const resultDiv = document.getElementById('networkGraphResult');
    if (loadBtn) loadBtn.onclick = async () => {
      const res = await fetch('/api/notifications/stats/network');
      const data = await res.json();
      if (data.nodes && data.edges) {
        resultDiv.textContent = '';
        renderNetworkGraph(networkDiv, data.nodes, data.edges);
      } else {
        resultDiv.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π.';
      }
    };
  }
});

// --- Chart.js heatmap ---
function renderHeatmap(canvas, matrix, labels) {
  if (!window.Chart) {
    canvas.parentElement.innerHTML = '<div style="color:red">Chart.js –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω</div>';
    return;
  }
  if (canvas._chart) canvas._chart.destroy();
  canvas._chart = new Chart(canvas, {
    type: 'matrix',
    data: {
      datasets: [{
        label: '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
        data: matrix.flatMap((row, i) => row.map((v, j) => ({ x: j, y: i, v }))),
        backgroundColor: ctx => {
          const value = ctx.dataset.data[ctx.dataIndex].v;
          return value > 0.7 ? '#ff5252' : value > 0.4 ? '#ffd600' : '#00e676';
        },
        width: 30,
        height: 30
      }],
    },
    options: {
      scales: {
        x: { labels, display: true },
        y: { labels, display: true }
      },
      plugins: { legend: { display: false } }
    }
  });
}

// --- vis-network graph ---
function renderNetworkGraph(container, nodes, edges) {
  if (!window.vis || !window.vis.Network) {
    container.innerHTML = '<div style="color:red">vis-network –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω</div>';
    return;
  }
  container.innerHTML = '';
  const network = new vis.Network(container, { nodes, edges }, {
    nodes: { shape: 'dot', size: 18, font: { size: 16 } },
    edges: { color: '#888', arrows: 'to' },
    physics: { stabilization: true }
  });
}
// --- Drag-and-drop —Ä–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  const dragPanel = document.getElementById('dragDropEditorPanel');
  if (dragPanel) {
    const templateList = document.getElementById('templateList');
    const segmentList = document.getElementById('segmentList');
    const saveBtn = document.getElementById('saveDragDropConfigBtn');
    const resultDiv = document.getElementById('dragDropEditorResult');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    async function loadTemplatesAndSegments() {
      const [tplRes, segRes] = await Promise.all([
        fetch('/api/notifications/templates'),
        fetch('/api/notifications/segments')
      ]);
      const templates = await tplRes.json();
      const segments = await segRes.json();
      renderList(templateList, templates, 'template');
      renderList(segmentList, segments, 'segment');
    }

    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Å drag-and-drop
    function renderList(container, items, type) {
      container.innerHTML = `<h3>${type === 'template' ? '–®–∞–±–ª–æ–Ω—ã' : '–°–µ–≥–º–µ–Ω—Ç—ã'}</h3>`;
      const ul = document.createElement('ul');
      ul.className = 'dragdrop-list';
      items.forEach(item => {
        const li = document.createElement('li');
        li.className = 'dragdrop-item';
        li.draggable = true;
        li.textContent = item.name || item.title || item.id;
        li.dataset.id = item.id;
        li.dataset.type = type;
        ul.appendChild(li);
      });
      container.appendChild(ul);
      addDragDropHandlers(ul);
    }

    // Drag-and-drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    function addDragDropHandlers(list) {
      let dragged;
      list.addEventListener('dragstart', e => {
        dragged = e.target;
        e.target.classList.add('dragging');
      });
      list.addEventListener('dragend', e => {
        e.target.classList.remove('dragging');
      });
      list.addEventListener('dragover', e => {
        e.preventDefault();
        const after = getDragAfterElement(list, e.clientY);
        if (after == null) {
          list.appendChild(dragged);
        } else {
          list.insertBefore(dragged, after);
        }
      });
    }
    function getDragAfterElement(list, y) {
      const items = [...list.querySelectorAll('.dragdrop-item:not(.dragging)')];
      return items.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Ä—è–¥–∫–∞
    if (saveBtn) saveBtn.onclick = async () => {
      const tplOrder = Array.from(templateList.querySelectorAll('.dragdrop-item')).map(li => li.dataset.id);
      const segOrder = Array.from(segmentList.querySelectorAll('.dragdrop-item')).map(li => li.dataset.id);
      const res = await fetch('/api/notifications/templates/reorder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ templateOrder: tplOrder, segmentOrder: segOrder })
      });
      const data = await res.json();
      resultDiv.textContent = data.success ? '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.' : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.';
    };

    loadTemplatesAndSegments();
  }
});
// --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ dashboard ---
window.addEventListener('DOMContentLoaded', () => {
  const auditPanel = document.getElementById('auditHistoryPanel');
  if (auditPanel) {
    const auditResult = document.getElementById('auditHistoryResult');
    const loadBtn = document.getElementById('loadAuditHistoryBtn');
    if (loadBtn) loadBtn.onclick = async () => {
      const res = await fetch('/api/audit/history');
      const data = await res.json();
      if (data.history && data.history.length) {
        auditResult.innerHTML = '<ul>' + data.history.map(h => `<li><b>${h.user_id}</b>: ${h.action} ‚Äî ${h.details} <span style='color:#888'>${h.created_at}</span></li>`).join('') + '</ul>';
      } else auditResult.innerHTML = '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞—É–¥–∏—Ç–∞.';
    };
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π: heatmap –∏ network graph ---
window.addEventListener('DOMContentLoaded', () => {
  const heatmapPanel = document.getElementById('heatmapPanel');
  const networkPanel = document.getElementById('networkGraphPanel');
  // Heatmap (Chart.js matrix)
  if (heatmapPanel) {
    const heatmapResult = document.getElementById('heatmapResult');
    const loadBtn = document.getElementById('loadHeatmapBtn');
    if (loadBtn) loadBtn.onclick = async () => {
      const res = await fetch('/api/notifications/stats/correlations');
      const data = await res.json();
      // data.matrix: [{x, y, v}], data.xLabels, data.yLabels
      heatmapResult.innerHTML = '<canvas id="heatmapChart" width="600" height="300" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
      const ctx = document.getElementById('heatmapChart').getContext('2d');
      new window.Chart(ctx, {
        type: 'matrix',
        data: {
          datasets: [{
            label: '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
            data: data.matrix,
            backgroundColor: ctx => {
              const v = ctx.dataset.data[ctx.dataIndex].v;
              return `rgba(44,130,201,${0.2+0.8*Math.abs(v)})`;
            },
            width: 40,
            height: 30
          }],
          labels: { x: data.xLabels, y: data.yLabels }
        },
        options: {
          scales: { x: { labels: data.xLabels }, y: { labels: data.yLabels } },
          plugins: { legend: { display: false } }
        }
      });
    };
  }
  // Network graph (vis-network)
  if (networkPanel) {
    const networkResult = document.getElementById('networkGraphResult');
    const loadBtn = document.getElementById('loadNetworkGraphBtn');
    if (loadBtn) loadBtn.onclick = async () => {
      const res = await fetch('/api/notifications/stats/network');
      const data = await res.json();
      networkResult.innerHTML = '<div id="networkGraphVis" style="width:100%;height:400px;border:1px solid #ccc;margin-top:16px"></div>';
      const container = document.getElementById('networkGraphVis');
      const nodes = new window.vis.DataSet(data.nodes);
      const edges = new window.vis.DataSet(data.edges);
      new window.vis.Network(container, { nodes, edges }, { physics: { stabilization: false } });
    };
  }
});
// --- Drag-and-drop —Ä–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  const dragPanel = document.getElementById('dragEditorPanel');
  if (dragPanel) {
    const list = document.getElementById('dragEditorList');
    const saveBtn = document.getElementById('dragEditorSaveBtn');
    let items = [];
    // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤/—Å–µ–≥–º–µ–Ω—Ç–æ–≤
    const loadItems = async () => {
      const res = await fetch('/api/notifications/templates');
      const data = await res.json();
      items = data.templates || [];
      renderList();
    };
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å drag-and-drop
    function renderList() {
      list.innerHTML = items.map((item, idx) => `<div draggable="true" data-idx="${idx}" style="padding:8px;border:1px solid #ccc;margin-bottom:4px;background:#fff;cursor:move">${item.name}</div>`).join('');
      Array.from(list.children).forEach(el => {
        el.ondragstart = e => { e.dataTransfer.setData('text/plain', el.dataset.idx); };
        el.ondragover = e => { e.preventDefault(); };
        el.ondrop = e => {
          e.preventDefault();
          const from = Number(e.dataTransfer.getData('text/plain'));
          const to = Number(el.dataset.idx);
          if (from !== to) {
            const moved = items.splice(from, 1)[0];
            items.splice(to, 0, moved);
            renderList();
          }
        };
      });
    }
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    if (saveBtn) saveBtn.onclick = async () => {
      await fetch('/api/notifications/templates/reorder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ order: items.map(i => i.name) })
      });
      alert('–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
    };
    loadItems();
  }
});
// --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ dashboard ---
window.addEventListener('DOMContentLoaded', () => {
  const aiRecPanel = document.getElementById('aiRecommendPanel');
  if (aiRecPanel) {
    const segmentInput = document.getElementById('aiRecSegment');
    const channelInput = document.getElementById('aiRecChannel');
    const templateInput = document.getElementById('aiRecTemplate');
    const statsInput = document.getElementById('aiRecStats');
    const runBtn = document.getElementById('aiRecRunBtn');
    const resultBox = document.getElementById('aiRecResult');
    if (runBtn) runBtn.onclick = async () => {
      const segment = segmentInput?.value || '';
      const channel = channelInput?.value || '';
      const template = templateInput?.value || '';
      let stats = [];
      try { stats = JSON.parse(statsInput?.value || '[]'); } catch {}
      const res = await fetch('/api/notifications/ai-recommend', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ segment, channel, template, stats })
      });
      const data = await res.json();
      resultBox.innerHTML = `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> ${data.recommendation}<br><b>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è:</b> ${data.predictedConversion?.toFixed(2)}%`;
    };
  }
});
// --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º dashboard –ø–æ —Ä–æ–ª—è–º/–ø—Ä–∞–≤–∞–º ---
window.addEventListener('DOMContentLoaded', () => {
  async function getCurrentUser() {
    try {
      const res = await fetch('/api/rbac/users/me');
      const data = await res.json();
      return data.user;
    } catch { return null; }
  }
  function restrictByPermission(elementId, permission, user) {
    const el = document.getElementById(elementId);
    if (!el) return;
    if (!user?.permissions?.includes(permission)) {
      el.style.display = 'none';
    }
  }
  function restrictByRole(elementId, role, user) {
    const el = document.getElementById(elementId);
    if (!el) return;
    if (user?.role !== role) {
      el.style.display = 'none';
    }
  }
  getCurrentUser().then(user => {
    // –ü—Ä–∏–º–µ—Ä: —Å–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    restrictByRole('rbacAdminPanel', 'admin', user);
    // –ü—Ä–∏–º–µ—Ä: —Å–∫—Ä—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç BI –¥–ª—è –Ω–µ-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    restrictByPermission('dashboardBIExportPanel', 'manage:metrics', user);
    // –ü—Ä–∏–º–µ—Ä: —Å–∫—Ä—ã—Ç—å A/B —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–µ-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    restrictByPermission('abTestPanel', 'manage:notifications', user);
    // ...–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º/–ø—Ä–∞–≤–∞–º...
  });
});
// --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
window.addEventListener('DOMContentLoaded', () => {
  const rbacPanel = document.getElementById('rbacAdminPanel');
  if (rbacPanel) {
    const usersList = document.getElementById('rbacUsersList');
    const rolesList = document.getElementById('rbacRolesList');
    const permsList = document.getElementById('rbacPermsList');
    const assignRoleBtn = document.getElementById('rbacAssignRoleBtn');
    const addPermBtn = document.getElementById('rbacAddPermBtn');
    const removePermBtn = document.getElementById('rbacRemovePermBtn');
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const loadUsers = async () => {
      const res = await fetch('/api/rbac/users');
      const data = await res.json();
      usersList.innerHTML = data.users.map(u => `<option value="${u.id}">${u.username} (${u.role})</option>`).join('');
    };
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    const loadRolesPerms = async () => {
      const res = await fetch('/api/rbac/roles');
      const data = await res.json();
      rolesList.innerHTML = Object.values(data.roles).map(r => `<option value="${r}">${r}</option>`).join('');
      permsList.innerHTML = Object.values(data.permissions).map(p => `<option value="${p}">${p}</option>`).join('');
    };
    // –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å
    if (assignRoleBtn) assignRoleBtn.onclick = async () => {
      const userId = usersList.value;
      const role = rolesList.value;
      await fetch('/api/rbac/assign-role', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, role })
      });
      loadUsers();
      alert('–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!');
    };
    // –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (addPermBtn) addPermBtn.onclick = async () => {
      const userId = usersList.value;
      const permission = permsList.value;
      await fetch('/api/rbac/add-permission', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, permission })
      });
      loadUsers();
      alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    };
    // –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (removePermBtn) removePermBtn.onclick = async () => {
      const userId = usersList.value;
      const permission = permsList.value;
      await fetch('/api/rbac/remove-permission', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, permission })
      });
      loadUsers();
      alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!');
    };
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadUsers();
    loadRolesPerms();
  }
});
// --- –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ---
window.addEventListener('DOMContentLoaded', () => {
  let ws;
  function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const wsUrl = `${protocol}://${window.location.host}`;
    ws = new window.WebSocket(wsUrl);
    ws.onopen = () => {
      console.log('WebSocket connected');
    };
    ws.onmessage = (event) => {
      try {
        const msg = JSON.parse(event.data);
        if (msg.type === 'analytics-update' && msg.data) {
          // –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (msg.data.aiReports && window.showChartAiReports) window.showChartAiReports(msg.data.aiReports);
          if (msg.data.emailStats && window.showChartEmailStats) window.showChartEmailStats(msg.data.emailStats);
          if (msg.data.channels && window.showChartChannelsCompare) window.showChartChannelsCompare(msg.data.channels);
          if (msg.data.failures && window.showChartFailures) window.showChartFailures(msg.data.failures);
          if (msg.data.biExport && window.showChartBiExport) window.showChartBiExport(msg.data.biExport);
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }
      } catch (e) { console.error('WS message error', e); }
    };
    ws.onclose = () => {
      setTimeout(connectWebSocket, 3000); // –ê–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç
    };
  }
  connectWebSocket();
});
// --- –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã ---
window.addEventListener('DOMContentLoaded', () => {
  const segmentPanel = document.getElementById('segmentEditorPanel');
  if (segmentPanel) {
    const segmentList = document.getElementById('segmentList');
    const segmentEditor = document.getElementById('segmentEditor');
    const segmentSaveBtn = document.getElementById('segmentSaveBtn');
    const segmentReport = document.getElementById('segmentReportResult');
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    const loadSegments = async () => {
      const res = await fetch('/api/notifications/stats/segments');
      const data = await res.json();
      if (data.segments && data.segments.length) {
        segmentList.innerHTML = data.segments.map(s => `<option value="${s.id}">${s.name}</option>`).join('');
      } else segmentList.innerHTML = '<option>–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤</option>';
    };
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    segmentList.onchange = async () => {
      const id = segmentList.value;
      if (!id) return;
      const res = await fetch('/api/notifications/stats/segments/' + encodeURIComponent(id));
      const data = await res.json();
      if (data.segment) {
        segmentEditor.value = data.segment.definition || '';
      } else segmentEditor.value = '';
    };
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    if (segmentSaveBtn) {
      segmentSaveBtn.onclick = async () => {
        const id = segmentList.value;
        const def = segmentEditor.value;
        await fetch('/api/notifications/stats/segments/' + encodeURIComponent(id), {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ definition: def })
        });
        alert('–°–µ–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
        loadSegments();
      };
    }
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
    segmentList.addEventListener('change', async () => {
      const id = segmentList.value;
      if (!id) return;
      const res = await fetch('/api/notifications/stats/segmented?id=' + encodeURIComponent(id));
      const data = await res.json();
      if (data.stats && data.stats.length) {
        segmentReport.innerHTML = '<ul>' + data.stats.map(s => `<li>${s.metric}: ${s.value}</li>`).join('') + '</ul>';
      } else segmentReport.innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É.';
    });
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadSegments();
  }
});
// --- –î–∞—à–±–æ—Ä–¥ –¥–ª—è A/B —Ç–µ—Å—Ç–æ–≤: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
window.addEventListener('DOMContentLoaded', () => {
  const abPanel = document.getElementById('abTestPanel');
  if (abPanel) {
    const abResult = document.getElementById('abTestResult');
    const abRecommendation = document.getElementById('abTestRecommendation');
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const showAbTestChart = (results) => {
      if (!results || !results.variants) return;
      const labels = results.variants.map(v => v.name || v.variant);
      const conversions = results.variants.map(v => Number(v.conversion||0));
      abResult.innerHTML += '<canvas id="abTestChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
      const chartEl = document.getElementById('abTestChart');
      if (!chartEl) return;
      if (window.abTestChart) window.abTestChart.destroy?.();
      window.abTestChart = new window.Chart(chartEl.getContext('2d'), {
        type: 'bar',
        data: {
          labels,
          datasets: [
            { label: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)', data: conversions, backgroundColor: '#5bc0be' }
          ]
        },
        options: {
          responsive: true,
          plugins: { legend: { position: 'top' } },
          scales: { y: { beginAtZero: true, title: { display: true, text: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)' } } }
        }
      });
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
      const maxConv = Math.max(...conversions);
      const bestIdx = conversions.findIndex(c => c === maxConv);
      const bestVariant = labels[bestIdx];
      abRecommendation.innerHTML = `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî <span style='color:#28a745'>${bestVariant}</span> (${maxConv}%)`;
    };
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadAbTestBtn
    const loadBtn = document.getElementById('loadAbTestBtn');
    if (loadBtn) {
      loadBtn.onclick = async () => {
        const testName = document.getElementById('abTestName')?.value || '';
        const res = await fetch('/api/notifications/abtest/results/' + encodeURIComponent(testName));
        const data = await res.json();
        if (data.variants && data.variants.length) {
          abResult.innerHTML = '<ul>' + data.variants.map(v => `<li>${v.name || v.variant}: ${v.conversion}% (${v.count} –æ—Ç–ø—Ä–∞–≤–æ–∫)</li>`).join('') + '</ul>';
          showAbTestChart(data);
        } else abResult.innerHTML = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∞.';
      };
    }
  }
});
// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–Ω–æ–º–∞–ª–∏—è—Ö: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
window.addEventListener('DOMContentLoaded', () => {
  const anomalyPanel = document.getElementById('anomalyNotifyPanel');
  if (anomalyPanel) {
    const anomalyResult = document.getElementById('anomalyNotifyResult');
    const anomalyStatus = document.getElementById('anomalyNotifyStatus');
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)
    const checkAnomalies = async () => {
      try {
        const res = await fetch('/api/notifications/failures/analyze?anomaly=1');
        const data = await res.json();
        if (data.anomalies && data.anomalies.length) {
          anomalyResult.innerHTML = '<ul>' + data.anomalies.map(a => `<li><b>${a.channel}</b>: ${a.type} ‚Äî ${a.count} (${a.period})<br>${a.recommendation||''}</li>`).join('') + '</ul>';
          anomalyStatus.innerHTML = '<span style="color:#d9534f;font-weight:bold">–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏!</span>';
          // Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          if (window.Notification && Notification.permission === 'granted') {
            data.anomalies.forEach(a => {
              new Notification('–ê–Ω–æ–º–∞–ª–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏', { body: `${a.channel}: ${a.type} ‚Äî ${a.count} (${a.period})` });
            });
          }
        } else {
          anomalyResult.innerHTML = '–ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.';
          anomalyStatus.innerHTML = '<span style="color:#28a745;font-weight:bold">–í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ</span>';
        }
      } catch {
        anomalyResult.innerHTML = '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.';
        anomalyStatus.innerHTML = '';
      }
    };
    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (window.Notification && Notification.permission !== 'granted') {
      Notification.requestPermission();
    }
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫
    checkAnomalies();
    setInterval(checkAnomalies, 60000);
    // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const anomalyCheckBtn = document.getElementById('anomalyNotifyCheckBtn');
    if (anomalyCheckBtn) anomalyCheckBtn.onclick = checkAnomalies;
  }
});
// --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ BI-—Å–∏—Å—Ç–µ–º–∞–º–∏ (Google Data Studio, Power BI) ---
window.addEventListener('DOMContentLoaded', () => {
  const biPanel = document.getElementById('dashboardBIExportPanel');
  if (biPanel) {
    const exportCsvBtn = document.getElementById('exportCsvBtn');
    const exportJsonBtn = document.getElementById('exportJsonBtn');
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BI-—ç–∫—Å–ø–æ—Ä—Ç–∞
    const collectAnalyticsData = async () => {
      const filters = {};
      document.querySelectorAll('#dashboardFiltersPanel select, #dashboardFiltersPanel input').forEach(el => {
        if (el.value) filters[el.name||el.id] = el.value;
      });
      const params = new URLSearchParams(filters);
      const endpoints = [
        { key: 'aiReports', url: '/api/notifications/report?' + params },
        { key: 'emailStats', url: '/api/notifications/email/stats?' + params },
        { key: 'channels', url: '/api/notifications/stats/channels?' + params },
        { key: 'failures', url: '/api/notifications/failures/analyze?' + params },
        { key: 'biExport', url: '/api/notifications/stats/export?' + params },
        { key: 'templateHistory', url: '/api/notifications/templates/history/all?' + params }
      ];
      const results = {};
      for (const ep of endpoints) {
        try {
          const res = await fetch(ep.url);
          results[ep.key] = await res.json();
        } catch { results[ep.key] = {}; }
      }
      return results;
    };
    // CSV —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Google Data Studio, Power BI
    if (exportCsvBtn) {
      exportCsvBtn.onclick = async () => {
        const data = await collectAnalyticsData();
        const res = await fetch('/api/notifications/stats/export/csv', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'analytics_bi_export.csv';
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        alert('CSV-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Google Data Studio –∏–ª–∏ Power BI. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ BI-—Å–∏—Å—Ç–µ–º–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.');
      };
    }
    // JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Power BI
    if (exportJsonBtn) {
      exportJsonBtn.onclick = async () => {
        const data = await collectAnalyticsData();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'analytics_bi_export.json';
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        alert('JSON-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Power BI. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ Power BI –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.');
      };
    }
  }
});
// --- –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ PDF/Excel ---
window.addEventListener('DOMContentLoaded', () => {
  const exportPanel = document.getElementById('dashboardExportPanel');
  if (exportPanel) {
    const exportPdfBtn = document.getElementById('exportPdfBtn');
    const exportExcelBtn = document.getElementById('exportExcelBtn');
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const collectAnalyticsData = async () => {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å API —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      const filters = {};
      document.querySelectorAll('#dashboardFiltersPanel select, #dashboardFiltersPanel input').forEach(el => {
        if (el.value) filters[el.name||el.id] = el.value;
      });
      const params = new URLSearchParams(filters);
      const endpoints = [
        { key: 'aiReports', url: '/api/notifications/report?' + params },
        { key: 'emailStats', url: '/api/notifications/email/stats?' + params },
        { key: 'channels', url: '/api/notifications/stats/channels?' + params },
        { key: 'failures', url: '/api/notifications/failures/analyze?' + params },
        { key: 'biExport', url: '/api/notifications/stats/export?' + params },
        { key: 'templateHistory', url: '/api/notifications/templates/history/all?' + params }
      ];
      const results = {};
      for (const ep of endpoints) {
        try {
          const res = await fetch(ep.url);
          results[ep.key] = await res.json();
        } catch { results[ep.key] = {}; }
      }
      return results;
    };
    // PDF —ç–∫—Å–ø–æ—Ä—Ç
    if (exportPdfBtn) {
      exportPdfBtn.onclick = async () => {
        const data = await collectAnalyticsData();
        const res = await fetch('/api/notifications/stats/export/pdf', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'analytics_report.pdf';
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
      };
    }
    // Excel —ç–∫—Å–ø–æ—Ä—Ç
    if (exportExcelBtn) {
      exportExcelBtn.onclick = async () => {
        const data = await collectAnalyticsData();
        const res = await fetch('/api/notifications/stats/export/excel', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const blob = await res.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'analytics_report.xlsx';
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
      };
    }
  }
});
// --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ dashboard ---
window.addEventListener('DOMContentLoaded', () => {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
  const filterPanel = document.getElementById('dashboardFiltersPanel');
  if (filterPanel) {
    const filterPeriod = document.getElementById('filterPeriod');
    const filterSegment = document.getElementById('filterSegment');
    const filterChannel = document.getElementById('filterChannel');
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ API-–∑–∞–ø—Ä–æ—Å–∞–º
    const getFilters = () => {
      return {
        period: filterPeriod?.value || '',
        segment: filterSegment?.value || '',
        channel: filterChannel?.value || ''
      };
    };
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const overrideLoad = (btnId, api, resultId, showChart) => {
      const btn = document.getElementById(btnId);
      const result = document.getElementById(resultId);
      if (btn && result) {
        btn.onclick = async () => {
          const filters = getFilters();
          const params = new URLSearchParams(filters);
          const res = await fetch(api + (api.includes('?') ? '&' : '?') + params.toString());
          const data = await res.json();
          showChart(data);
        };
      }
    };
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
    overrideLoad('loadAiReportBtn', '/api/notifications/report', 'aiReportResult', (data) => {
      // ...—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π showChart –¥–ª—è AI-–æ—Ç—á—ë—Ç–æ–≤...
      if (data.reports && data.reports.length) {
        const aiResult = document.getElementById('aiReportResult');
        aiResult.innerHTML = '<ul>' + data.reports.map(r => `<li>${r.date || r.created}: ${r.summary || ''} <br>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${r.efficiency || '-'}%</li>`).join('') + '</ul>';
        window.showChartAiReports?.(data.reports);
      } else document.getElementById('aiReportResult').innerHTML = '–ù–µ—Ç AI-–æ—Ç—á—ë—Ç–æ–≤.';
    });
    overrideLoad('loadEmailStatsBtn', '/api/notifications/email/stats', 'emailStatsResult', (data) => {
      if (data.stats && data.stats.length) {
        const emailResult = document.getElementById('emailStatsResult');
        emailResult.innerHTML = '<ul>' + data.stats.map(s => `<li>${s.date || s.sent_date}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${s.sent}, –æ—Ç–∫—Ä—ã—Ç–æ ${s.opened}, –ø–µ—Ä–µ—Ö–æ–¥—ã ${s.clicked}</li>`).join('') + '</ul>';
        window.showChartEmailStats?.(data.stats);
      } else document.getElementById('emailStatsResult').innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ email-—Ä–∞—Å—Å—ã–ª–∫–∞–º.';
    });
    overrideLoad('loadChannelsCompareBtn', '/api/notifications/stats/channels', 'channelsCompareResult', (data) => {
      if (data.channels && data.channels.length) {
        const channelResult = document.getElementById('channelsCompareResult');
        channelResult.innerHTML = '<ul>' + data.channels.map(c => `<li>${c.channel}: —É—Å–ø–µ—à–Ω—ã–µ ${c.success}, –æ—à–∏–±–æ—á–Ω—ã–µ ${c.failed}</li>`).join('') + '</ul>';
        window.showChartChannelsCompare?.(data.channels);
      } else document.getElementById('channelsCompareResult').innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º.';
    });
    overrideLoad('loadFailuresBtn', '/api/notifications/failures/analyze', 'failuresResult', (data) => {
      if (data.failures && data.failures.length) {
        const failuresResult = document.getElementById('failuresResult');
        failuresResult.innerHTML = '<ul>' + data.failures.map(f => `<li>${f.channel} ‚Äî ${f.status} (${f.count})<br>—Å ${f.first} –ø–æ ${f.last}</li>`).join('') + '</ul>';
        window.showChartFailures?.(data.failures);
      } else document.getElementById('failuresResult').innerHTML = '–ù–µ—Ç –æ—à–∏–±–æ–∫.';
    });
    overrideLoad('loadBiExportBtn', '/api/notifications/stats/export', 'biExportResult', (data) => {
      if (data.segments && data.segments.length) {
        const biResult = document.getElementById('biExportResult');
        biResult.innerHTML = '<ul>' + data.segments.map(s => `<li>${s.segment}: ${s.count}</li>`).join('') + '</ul>';
        window.showChartBiExport?.(data.segments);
      } else document.getElementById('biExportResult').innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.';
    });
    // ...–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
  }
});
// --- Timeline –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  const templatePanel = document.getElementById('templateHistoryPanel');
  if (templatePanel) {
    const templateResult = document.getElementById('templateHistoryResult');
    const filterAuthor = document.getElementById('templateFilterAuthor');
    const filterType = document.getElementById('templateFilterType');
    if (templateResult) {
      const renderTimeline = (history) => {
        templateResult.innerHTML = '<div id="templateTimeline" style="margin-top:16px"></div>';
        const timeline = document.getElementById('templateTimeline');
        if (!timeline) return;
        timeline.innerHTML = history.map(h => `
          <div style="border-left:3px solid #007bff;padding-left:12px;margin-bottom:12px;">
            <div style="font-weight:bold">${h.date || h.changed_at} ‚Äî ${h.type || h.action}</div>
            <div>–ê–≤—Ç–æ—Ä: ${h.author || h.user || '-'}</div>
            <div>–®–∞–±–ª–æ–Ω: ${h.template || h.name || '-'}</div>
            <div>–û–ø–∏—Å–∞–Ω–∏–µ: ${h.description || h.details || '-'}</div>
          </div>
        `).join('');
      };
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      const applyFilters = (history) => {
        let filtered = history;
        if (filterAuthor && filterAuthor.value) filtered = filtered.filter(h => (h.author||h.user||'').toLowerCase().includes(filterAuthor.value.toLowerCase()));
        if (filterType && filterType.value) filtered = filtered.filter(h => (h.type||h.action||'').toLowerCase().includes(filterType.value.toLowerCase()));
        renderTimeline(filtered);
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadTemplateHistoryBtn
      const loadBtn = document.getElementById('loadTemplateHistoryBtn');
      let lastHistory = [];
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const name = document.getElementById('templateHistoryName')?.value || '';
          const res = await fetch('/api/notifications/templates/history/' + encodeURIComponent(name));
          const data = await res.json();
          if (data.history && data.history.length) {
            lastHistory = data.history;
            renderTimeline(data.history);
          } else templateResult.innerHTML = '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.';
        };
      }
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      if (filterAuthor) filterAuthor.oninput = () => applyFilters(lastHistory);
      if (filterType) filterType.oninput = () => applyFilters(lastHistory);
    }
  }
});
// --- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ (Stacked Bar Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const channelPanel = document.getElementById('channelsComparePanel');
  if (channelPanel) {
    const channelResult = document.getElementById('channelsCompareResult');
    if (channelResult) {
      const showChart = (channels) => {
        const labels = channels.map(c => c.channel || 'unknown');
        const success = channels.map(c => Number(c.success || 0));
        const failed = channels.map(c => Number(c.failed || 0));
        channelResult.innerHTML += '<canvas id="channelsCompareChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('channelsCompareChart');
        if (!chartEl) return;
        if (window.channelsCompareChart) window.channelsCompareChart.destroy?.();
        window.channelsCompareChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'bar',
          data: {
            labels,
            datasets: [
              { label: '–£—Å–ø–µ—à–Ω—ã–µ', data: success, backgroundColor: '#28a745', stack: 'Stack' },
              { label: '–û—à–∏–±–æ—á–Ω—ã–µ', data: failed, backgroundColor: '#d9534f', stack: 'Stack' }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: {
              x: { stacked: true },
              y: { stacked: true, beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫' } }
            }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadChannelsCompareBtn
      const loadBtn = document.getElementById('loadChannelsCompareBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const res = await fetch('/api/notifications/stats/channels');
          const data = await res.json();
          if (data.channels && data.channels.length) {
            channelResult.innerHTML = '<ul>' + data.channels.map(c => `<li>${c.channel}: —É—Å–ø–µ—à–Ω—ã–µ ${c.success}, –æ—à–∏–±–æ—á–Ω—ã–µ ${c.failed}</li>`).join('') + '</ul>';
            showChart(data.channels);
          } else channelResult.innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ email-—Ä–∞—Å—Å—ã–ª–æ–∫ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const emailPanel = document.getElementById('emailStatsPanel');
  if (emailPanel) {
    const emailResult = document.getElementById('emailStatsResult');
    if (emailResult) {
      const showChart = (stats) => {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        const byDate = {};
        stats.forEach(s => {
          const d = s.date || s.sent_date || 'unknown';
          byDate[d] = byDate[d] || { sent: 0, opened: 0, clicked: 0 };
          byDate[d].sent += Number(s.sent || 0);
          byDate[d].opened += Number(s.opened || 0);
          byDate[d].clicked += Number(s.clicked || 0);
        });
        const labels = Object.keys(byDate);
        const sent = labels.map(d => byDate[d].sent);
        const opened = labels.map(d => byDate[d].opened);
        const clicked = labels.map(d => byDate[d].clicked);
        emailResult.innerHTML += '<canvas id="emailStatsChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('emailStatsChart');
        if (!chartEl) return;
        if (window.emailStatsChart) window.emailStatsChart.destroy?.();
        window.emailStatsChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'bar',
          data: {
            labels,
            datasets: [
              { label: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', data: sent, backgroundColor: '#007bff' },
              { label: '–û—Ç–∫—Ä—ã—Ç–æ', data: opened, backgroundColor: '#28a745' },
              { label: '–ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º', data: clicked, backgroundColor: '#f7b32b' }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: { y: { beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ' } } }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadEmailStatsBtn
      const loadBtn = document.getElementById('loadEmailStatsBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const res = await fetch('/api/notifications/email/stats');
          const data = await res.json();
          if (data.stats && data.stats.length) {
            emailResult.innerHTML = '<ul>' + data.stats.map(s => `<li>${s.date || s.sent_date}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${s.sent}, –æ—Ç–∫—Ä—ã—Ç–æ ${s.opened}, –ø–µ—Ä–µ—Ö–æ–¥—ã ${s.clicked}</li>`).join('') + '</ul>';
            showChart(data.stats);
          } else emailResult.innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ email-—Ä–∞—Å—Å—ã–ª–∫–∞–º.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ AI-–æ—Ç—á—ë—Ç–æ–≤ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const aiPanel = document.getElementById('aiReportPanel');
  if (aiPanel) {
    const aiResult = document.getElementById('aiReportResult');
    if (aiResult) {
      const showChart = (reports) => {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const byDate = {};
        reports.forEach(r => {
          const d = r.date || r.created || 'unknown';
          byDate[d] = byDate[d] || { count: 0, eff: 0 };
          byDate[d].count++;
          byDate[d].eff += Number(r.efficiency || 0);
        });
        const labels = Object.keys(byDate);
        const counts = labels.map(d => byDate[d].count);
        const effs = labels.map(d => byDate[d].eff / byDate[d].count);
        aiResult.innerHTML += '<canvas id="aiReportChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('aiReportChart');
        if (!chartEl) return;
        if (window.aiReportChart) window.aiReportChart.destroy?.();
        window.aiReportChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'line',
          data: {
            labels,
            datasets: [
              { label: 'AI-–æ—Ç—á—ë—Ç—ã (–∫–æ–ª-–≤–æ)', data: counts, borderColor: '#007bff', backgroundColor: '#007bff22', yAxisID: 'y' },
              { label: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', data: effs, borderColor: '#28a745', backgroundColor: '#28a74522', yAxisID: 'y1' }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: {
              y: { beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ –æ—Ç—á—ë—Ç–æ–≤' }, position: 'left' },
              y1: { beginAtZero: true, title: { display: true, text: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' }, position: 'right', grid: { drawOnChartArea: false } }
            }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadAiReportBtn
      const loadBtn = document.getElementById('loadAiReportBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const res = await fetch('/api/notifications/report');
          const data = await res.json();
          if (data.reports && data.reports.length) {
            aiResult.innerHTML = '<ul>' + data.reports.map(r => `<li>${r.date || r.created}: ${r.summary || ''} <br>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${r.efficiency || '-'}%</li>`).join('') + '</ul>';
            showChart(data.reports);
          } else aiResult.innerHTML = '–ù–µ—Ç AI-–æ—Ç—á—ë—Ç–æ–≤.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è BI-—ç–∫—Å–ø–æ—Ä—Ç–∞ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const biPanel = document.getElementById('biExportPanel');
  if (biPanel) {
    const biResult = document.getElementById('biExportResult');
    if (biResult) {
      const showChart = (segments) => {
        const labels = segments.map(s => s.segment || 'unknown');
        const counts = segments.map(s => Number(s.count||0));
        biResult.innerHTML += '<canvas id="biExportChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('biExportChart');
        if (!chartEl) return;
        if (window.biExportChart) window.biExportChart.destroy?.();
        window.biExportChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'pie',
          data: {
            labels,
            datasets: [
              { label: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', data: counts, backgroundColor: ['#5bc0be','#f7b32b','#d9534f','#6c757d','#007bff','#28a745','#6610f2','#e83e8c'] }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadBiExportBtn
      const loadBtn = document.getElementById('loadBiExportBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const res = await fetch('/api/notifications/stats/export');
          const data = await res.json();
          if (data.segments && data.segments.length) {
            biResult.innerHTML = '<ul>' + data.segments.map(s => `<li>${s.segment}: ${s.count}</li>`).join('') + '</ul>';
            showChart(data.segments);
          } else biResult.innerHTML = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const failurePanel = document.getElementById('failureAnalysisPanel');
  if (failurePanel) {
    const failuresResult = document.getElementById('failuresResult');
    if (failuresResult) {
      const showChart = (failures) => {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        const byChannel = {};
        failures.forEach(f => {
          const ch = f.channel || 'unknown';
          byChannel[ch] = (byChannel[ch]||0)+Number(f.count||0);
        });
        const labels = Object.keys(byChannel);
        const counts = Object.values(byChannel);
        failuresResult.innerHTML += '<canvas id="failuresChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('failuresChart');
        if (!chartEl) return;
        if (window.failuresChart) window.failuresChart.destroy?.();
        window.failuresChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'bar',
          data: {
            labels,
            datasets: [
              { label: '–û—à–∏–±–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º', data: counts, backgroundColor: '#d9534f' }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: { y: { beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ –æ—à–∏–±–æ–∫' } } }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadFailuresBtn
      const loadBtn = document.getElementById('loadFailuresBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const res = await fetch('/api/notifications/failures/analyze');
          const data = await res.json();
          if (data.failures && data.failures.length) {
            failuresResult.innerHTML = '<ul>' + data.failures.map(f => `<li>${f.channel} ‚Äî ${f.status} (${f.count})<br>—Å ${f.first} –ø–æ ${f.last}</li>`).join('') + '</ul>';
            if (data.recommendations && data.recommendations.length) {
              failuresResult.innerHTML += '<h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4><ul>' + data.recommendations.map(r => `<li>${r}</li>`).join('') + '</ul>';
            }
            showChart(data.failures);
          } else failuresResult.innerHTML = '–ù–µ—Ç –æ—à–∏–±–æ–∫.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const templateHistoryPanel = document.getElementById('templateHistoryPanel');
  if (templateHistoryPanel) {
    const historyResult = document.getElementById('historyResult');
    if (historyResult) {
      const showChart = (history) => {
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        const byDate = {};
        history.forEach(h => {
          const date = h.updated_at?.slice(0,10) || 'unknown';
          byDate[date] = (byDate[date]||0)+1;
        });
        const labels = Object.keys(byDate);
        const changes = Object.values(byDate);
        historyResult.innerHTML += '<canvas id="historyChart" width="600" height="180" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('historyChart');
        if (!chartEl) return;
        if (window.historyChart) window.historyChart.destroy?.();
        window.historyChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'line',
          data: {
            labels,
            datasets: [
              { label: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞', data: changes, borderColor: '#36a2eb', backgroundColor: '#36a2eb22', fill: true }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: { y: { beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π' } } }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loadHistoryBtn
      const loadBtn = document.getElementById('loadHistoryBtn');
      if (loadBtn) {
        loadBtn.onclick = async () => {
          const name = document.getElementById('historyTemplateName').value;
          const res = await fetch(`/api/notifications/templates/history/${encodeURIComponent(name)}`);
          const data = await res.json();
          if (data.history && data.history.length) {
            historyResult.innerHTML = '<ul>' + data.history.map(h => `<li>–í–µ—Ä—Å–∏—è ${h.version}, ${h.updated_at}, ${h.updated_by}<br><pre>${JSON.stringify(h.changes,null,2)}</pre></li>`).join('') + '</ul>';
            showChart(data.history);
          } else historyResult.innerHTML = '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.';
        };
      }
    }
  }
});
// --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ A/B —Ç–µ—Å—Ç–æ–≤ (Chart.js) ---
window.addEventListener('DOMContentLoaded', () => {
  const abTestPanel = document.getElementById('abTestPanel');
  if (abTestPanel) {
    const abTestResult = document.getElementById('abTestResult');
    if (abTestResult) {
      // –î–æ–±–∞–≤–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const showChart = (results) => {
        abTestResult.innerHTML += '<canvas id="abTestChart" width="600" height="220" style="max-width:100%;background:#fff;border-radius:8px;box-shadow:0 1px 4px #0001;margin-top:16px"></canvas>';
        const chartEl = document.getElementById('abTestChart');
        if (!chartEl) return;
        const labels = results.map(r => r.variant);
        const sent = results.map(r => r.sent);
        const opened = results.map(r => r.opened);
        const clicked = results.map(r => r.clicked);
        if (window.abTestChart) window.abTestChart.destroy?.();
        window.abTestChart = new window.Chart(chartEl.getContext('2d'), {
          type: 'bar',
          data: {
            labels,
            datasets: [
              { label: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', data: sent, backgroundColor: '#36a2eb' },
              { label: '–û—Ç–∫—Ä—ã—Ç–æ', data: opened, backgroundColor: '#4bc0c0' },
              { label: '–ö–ª–∏–∫–∏', data: clicked, backgroundColor: '#ffcd56' }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'top' } },
            scales: { y: { beginAtZero: true, title: { display: true, text: '–ö–æ–ª-–≤–æ' } } }
          }
        });
      };
      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ showAbTestResultsBtn
      const showBtn = document.getElementById('showAbTestResultsBtn');
      if (showBtn) {
        showBtn.onclick = async () => {
          const testName = document.getElementById('abTestName').value;
          const res = await fetch(`/api/notifications/abtest/results/${encodeURIComponent(testName)}`);
          const data = await res.json();
          if (data.results && data.results.length) {
            abTestResult.innerHTML = '<ul>' + data.results.map(r => `<li>${r.variant}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${r.sent}, –æ—Ç–∫—Ä—ã—Ç–æ ${r.opened}, –∫–ª–∏–∫–∏ ${r.clicked}</li>`).join('') + '</ul>';
            showChart(data.results);
          } else abTestResult.innerHTML = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.';
        };
      }
    }
  }
});
// --- Dashboard: –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ ---
window.addEventListener('DOMContentLoaded', () => {
  // BI —ç–∫—Å–ø–æ—Ä—Ç
  const exportBIcsvBtn = document.getElementById('exportBIcsvBtn');
  const exportBIjsonBtn = document.getElementById('exportBIjsonBtn');
  const exportBIResult = document.getElementById('exportBIResult');
  if (exportBIcsvBtn) exportBIcsvBtn.onclick = async () => {
    exportBIResult.innerHTML = '–≠–∫—Å–ø–æ—Ä—Ç...';
    const res = await fetch('/api/notifications/stats/export?format=csv');
    const csv = await res.text();
    const blob = new Blob([csv], {type:'text/csv'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = 'notification_stats.csv'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    exportBIResult.innerHTML = 'CSV –≤—ã–≥—Ä—É–∂–µ–Ω.';
  };
  if (exportBIjsonBtn) exportBIjsonBtn.onclick = async () => {
    exportBIResult.innerHTML = '–≠–∫—Å–ø–æ—Ä—Ç...';
    const res = await fetch('/api/notifications/stats/export?format=json');
    const json = await res.text();
    const blob = new Blob([json], {type:'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = 'notification_stats.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    exportBIResult.innerHTML = 'JSON –≤—ã–≥—Ä—É–∂–µ–Ω.';
  };

  // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞)
  const templateHistoryPanel = document.getElementById('templateHistoryPanel');
  if (templateHistoryPanel) {
    templateHistoryPanel.innerHTML = '<input id="historyTemplateName" placeholder="–ò–º—è —à–∞–±–ª–æ–Ω–∞"><button id="loadHistoryBtn">–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é</button><div id="historyResult"></div>';
    document.getElementById('loadHistoryBtn').onclick = async () => {
      const name = document.getElementById('historyTemplateName').value;
      const res = await fetch(`/api/notifications/templates/history/${encodeURIComponent(name)}`);
      const data = await res.json();
      const historyResult = document.getElementById('historyResult');
      if (data.history && data.history.length) {
        historyResult.innerHTML = '<ul>' + data.history.map(h => `<li>–í–µ—Ä—Å–∏—è ${h.version}, ${h.updated_at}, ${h.updated_by}<br><pre>${JSON.stringify(h.changes,null,2)}</pre></li>`).join('') + '</ul>';
      } else historyResult.innerHTML = '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.';
    };
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
  const failurePanel = document.getElementById('failureAnalysisPanel');
  if (failurePanel) {
    failurePanel.innerHTML = '<button id="loadFailuresBtn">–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏</button><div id="failuresResult"></div>';
    document.getElementById('loadFailuresBtn').onclick = async () => {
      const res = await fetch('/api/notifications/failures/analyze');
      const data = await res.json();
      const failuresResult = document.getElementById('failuresResult');
      if (data.failures && data.failures.length) {
        failuresResult.innerHTML = '<ul>' + data.failures.map(f => `<li>${f.channel} ‚Äî ${f.status} (${f.count})<br>—Å ${f.first} –ø–æ ${f.last}</li>`).join('') + '</ul>';
      } else failuresResult.innerHTML = '–ù–µ—Ç –æ—à–∏–±–æ–∫.';
      if (data.recommendations && data.recommendations.length) {
        failuresResult.innerHTML += '<h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4><ul>' + data.recommendations.map(r => `<li>${r}</li>`).join('') + '</ul>';
      }
    };
  }

  // A/B —Ç–µ—Å—Ç—ã (–∑–∞–ø—É—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä)
  const abTestPanel = document.getElementById('abTestPanel');
  if (abTestPanel) {
    abTestPanel.innerHTML = '<input id="abTestName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"><input id="abTestVariants" placeholder="–í–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"><button id="startAbTestBtn">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç</button><button id="showAbTestResultsBtn">–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button><div id="abTestResult"></div>';
    document.getElementById('startAbTestBtn').onclick = async () => {
      const testName = document.getElementById('abTestName').value;
      const variants = document.getElementById('abTestVariants').value.split(',').map(v=>v.trim()).filter(Boolean);
      await fetch('/api/notifications/abtest/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ testName, variants, userSegment: {} })
      });
      document.getElementById('abTestResult').innerHTML = '–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω.';
    };
    document.getElementById('showAbTestResultsBtn').onclick = async () => {
      const testName = document.getElementById('abTestName').value;
      const res = await fetch(`/api/notifications/abtest/results/${encodeURIComponent(testName)}`);
      const data = await res.json();
      if (data.results && data.results.length) {
        document.getElementById('abTestResult').innerHTML = '<ul>' + data.results.map(r => `<li>${r.variant}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${r.sent}, –æ—Ç–∫—Ä—ã—Ç–æ ${r.opened}, –∫–ª–∏–∫–∏ ${r.clicked}</li>`).join('') + '</ul>';
      } else document.getElementById('abTestResult').innerHTML = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.';
    };
  }
});
(() => {
  const els = {
    wsUrl: document.getElementById('wsUrl'),
    authToken: document.getElementById('authToken'),
    currentUserDisplay: document.getElementById('currentUser'),
    loginUser: document.getElementById('loginUser'),
    loginPass: document.getElementById('loginPass'),
    loginBtn: document.getElementById('loginBtn'),
    registerBtn: document.getElementById('registerBtn'),
  copyTokenBtn: document.getElementById('copyTokenBtn'),
    connectBtn: document.getElementById('connectBtn'),
    disconnectBtn: document.getElementById('disconnectBtn'),
    status: document.getElementById('status'),
    messageInput: document.getElementById('messageInput'),
    sendBtn: document.getElementById('sendBtn'),
    sendCommandBtn: document.getElementById('sendCommandBtn'),
    commandSelect: document.getElementById('commandSelect'),
    newCmdName: document.getElementById('newCmdName'),
    newCmdPayload: document.getElementById('newCmdPayload'),
    addCmdBtn: document.getElementById('addCmdBtn'),
    customCmds: document.getElementById('customCmds'),
    logs: document.getElementById('logs'),
  lastResponse: document.getElementById('lastResponse'),
    clearLogsBtn: document.getElementById('clearLogsBtn'),
    downloadLogsBtn: document.getElementById('downloadLogsBtn'),
    autoReconnect: document.getElementById('autoReconnect'),
    persistLogs: document.getElementById('persistLogs')
  };

  let currentUser = null;

  async function fetchCurrentUser(){
    const token = localStorage.getItem('jwt') || els.authToken.value || '';
    if(!token) { updateUserUI(null); return; }
    try{
      const opts = token && token.startsWith('ey') ? { headers: { Authorization: 'Bearer '+token } } : {};
      const r = await fetch('/api/me', opts);
      if(r.ok){ const u = await r.json(); currentUser = u; updateUserUI(u); } else { currentUser = null; updateUserUI(null); }
    }catch(e){ currentUser = null; updateUserUI(null); }
  }

  function updateUserUI(user){
    if(user){ els.currentUserDisplay.textContent = `${user.username} (${user.role})`; }
    else { els.currentUserDisplay.textContent = 'Not signed in'; }
    // enable/disable add command
    els.addCmdBtn.disabled = !(user && user.role === 'admin');
  }

  let ws = null;
  let reconnectTimeout = null;

  const logLines = [];
  function addLog(line){
    const time = new Date().toLocaleTimeString();
    const text = `[${time}] ${line}`;
    logLines.push(text);
    if(els.persistLogs.checked) localStorage.setItem('botLogs', JSON.stringify(logLines));
    const div = document.createElement('div'); div.textContent = text; els.logs.appendChild(div); els.logs.scrollTop = els.logs.scrollHeight;
  }

  function loadLogs(){
    const saved = localStorage.getItem('botLogs');
    if(saved){
      try{ const arr = JSON.parse(saved); arr.forEach(l => { const d = document.createElement('div'); d.textContent = l; els.logs.appendChild(d); logLines.push(l); }); }
      catch(e){ console.warn('failed load logs', e); }
    }
  }

  const customCommands = {};
  function renderCustoms(){
    els.customCmds.innerHTML = '';
    Object.keys(customCommands).forEach(name => {
      const row = document.createElement('div'); row.className='row';
      const label = document.createElement('div'); label.textContent = name + ' ‚Üí ' + customCommands[name]; label.style.flex='1';
      const btn = document.createElement('button'); btn.textContent='Send'; btn.style.padding='6px 10px'; btn.addEventListener('click', ()=>{
        const payload = JSON.stringify({type:'custom', cmd:name, text: customCommands[name]}); if(ws && ws.readyState===WebSocket.OPEN){ ws.send(payload); addLog('Custom sent: '+payload);} else addLog('WS not open');
      });
      const del = document.createElement('button'); del.textContent='Del'; del.style.background='#ff6b6b';
      if(!(currentUser && currentUser.role === 'admin')){ del.disabled = true; }
      del.addEventListener('click', ()=>{
        (async ()=>{
          const token = localStorage.getItem('jwt') || els.authToken.value || '';
          const headers = {};
          if(token){ if(token.startsWith('ey')) headers['Authorization'] = 'Bearer ' + token; else headers['x-auth-token'] = token; }
          try{
            const r = await fetch(`/api/commands/${encodeURIComponent(name)}`, { method:'DELETE', headers });
            if(r.ok){ delete customCommands[name]; renderCustoms(); } else { const txt = await r.text().catch(()=>'<no-body>'); addLog('delete failed: '+txt); }
          }catch(e){ addLog('delete error: '+(e && e.message)); }
        })();
      });
      row.appendChild(label); row.appendChild(btn); row.appendChild(del); els.customCmds.appendChild(row);
    });
  }

  async function persistCustoms(){
    const token = localStorage.getItem('jwt') || els.authToken.value || '';
    const headers = {'Content-Type':'application/json'};
    if(token && token.startsWith('ey')) headers['Authorization'] = 'Bearer ' + token; else if(token) headers['x-auth-token'] = token;
    try{
      for(const name of Object.keys(customCommands)){
        await fetch(`/api/commands`, { method:'POST', headers, body: JSON.stringify({name, payload: customCommands[name]}) });
      }
    }catch(e){ console.warn('persist failed', e); }
  }

  async function loadCustoms(){
    const token = localStorage.getItem('jwt') || els.authToken.value || '';
    try{
      const url = token && !token.startsWith('ey') ? `/api/commands?token=${encodeURIComponent(token)}` : '/api/commands';
      const opts = token && token.startsWith('ey') ? { headers: { Authorization: 'Bearer '+token } } : {};
      const res = await fetch(url, opts);
      if(res.ok){ const obj = await res.json(); Object.assign(customCommands, obj); renderCustoms(); }
    }catch(e){ console.warn(e); }
  }

    // Settings
    const loadSettings = async () => {
      const token = localStorage.getItem('jwt') || els.authToken.value || '';
      const opts = {};
      if(token && token.startsWith('ey')) opts.headers = { Authorization: 'Bearer '+token };
      try{
        const res = await fetch('/api/settings', opts);
        if(res.ok){ const s = await res.json(); if(typeof s.autoReconnect !== 'undefined') els.autoReconnect.checked = !!s.autoReconnect; if(typeof s.persistLogs !== 'undefined') els.persistLogs.checked = !!s.persistLogs; addLog('Settings loaded'); }
        else addLog('failed load settings');
      }catch(e){ addLog('load settings error: '+(e&&e.message)); }
    };

    const saveSettings = async () => {
      const token = localStorage.getItem('jwt') || els.authToken.value || '';
      const headers = {'Content-Type':'application/json'};
      if(token){ if(token.startsWith('ey')) headers['Authorization'] = 'Bearer ' + token; else headers['x-auth-token'] = token; }
      const body = { autoReconnect: !!els.autoReconnect.checked, persistLogs: !!els.persistLogs.checked };
      try{
        const res = await fetch('/api/settings', { method: 'PUT', headers, body: JSON.stringify(body) });
        if(res.ok) addLog('Settings saved'); else { const txt = await res.text().catch(()=>'<no-body>'); addLog('save settings failed: '+txt); }
      }catch(e){ addLog('save settings error: '+(e&&e.message)); }
    };

  function setStatus(connected){
    els.status.textContent = connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    els.status.classList.toggle('connected', connected);
    els.status.classList.toggle('disconnected', !connected);
    els.connectBtn.disabled = connected;
    els.disconnectBtn.disabled = !connected;
    els.sendBtn.disabled = !connected;
    els.sendCommandBtn.disabled = !connected;
  }

  function connect(){
  const url = els.wsUrl.value || 'ws://localhost:3000';
    addLog('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ' + url);
    ws = new WebSocket(url);
    ws.addEventListener('open', () => { addLog('WS –æ—Ç–∫—Ä—ã—Ç'); setStatus(true);
      const token = (els.authToken && els.authToken.value) ? els.authToken.value.trim() : null;
      if(token){ const authMsg = JSON.stringify({type:'auth', token}); ws.send(authMsg); addLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω auth token'); }
    });
    ws.addEventListener('close', (e) => { addLog('WS –∑–∞–∫—Ä—ã—Ç'); setStatus(false); ws = null; if(els.autoReconnect.checked) scheduleReconnect(); });
  ws.addEventListener('error', (e) => { addLog('WS –æ—à–∏–±–∫–∞: ' + (e && e.message) ); });
  ws.addEventListener('message', (m) => { addLog('–ü–æ–ª—É—á–µ–Ω–æ: ' + m.data); try{ els.lastResponse.textContent = typeof m.data === 'string' ? m.data : JSON.stringify(m.data); }catch(e){} });
  }

  function scheduleReconnect(){
    if(reconnectTimeout) return;
    addLog('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫');
    reconnectTimeout = setTimeout(() => { reconnectTimeout = null; connect(); }, 3000);
  }

  function disconnect(){ if(ws){ ws.close(); ws = null; setStatus(false); addLog('–û—Ç–∫–ª—é—á–µ–Ω–æ –≤—Ä—É—á–Ω—É—é'); } }

  function sendMessage(){
    const text = els.messageInput.value.trim(); if(!text || !ws || ws.readyState !== WebSocket.OPEN) return;
    const payload = JSON.stringify({type:'say', text});
    ws.send(payload); addLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + payload); els.messageInput.value = '';
  }

  function sendCommand(){
    const cmd = els.commandSelect.value; const text = els.messageInput.value.trim(); if(!ws || ws.readyState !== WebSocket.OPEN) return;
    const payload = JSON.stringify({type:cmd, text}); ws.send(payload); addLog('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ' + payload); els.messageInput.value = '';
  }

  function clearLogs(){ els.logs.innerHTML=''; logLines.length=0; localStorage.removeItem('botLogs'); }

  function downloadLogs(){
    const blob = new Blob([logLines.join('\n')], {type:'text/plain;charset=utf-8'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = `bot-logs-${Date.now()}.txt`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
  }

  // custom commands wireup
  els.addCmdBtn.addEventListener('click', async ()=>{
    const name = (els.newCmdName.value||'').trim(); const payload = (els.newCmdPayload.value||'').trim(); if(!name || !payload) return;
    const token = localStorage.getItem('jwt') || els.authToken.value || '';
    const headers = {'Content-Type':'application/json'};
    if(token){ if(token.startsWith('ey')) headers['Authorization'] = 'Bearer ' + token; else headers['x-auth-token'] = token; }
    try{
      const r = await fetch('/api/commands', { method:'POST', headers, body: JSON.stringify({name, payload}) });
      if(r.ok){ customCommands[name]=payload; els.newCmdName.value=''; els.newCmdPayload.value=''; renderCustoms(); addLog('Command added: '+name); }
      else { const txt = await r.text().catch(()=>'<no-body>'); addLog('failed add command: '+txt); }
    }catch(e){ addLog('add error: '+(e && e.message)); }
  });

  // login / register
  els.loginBtn.addEventListener('click', async ()=>{
    const user = (els.loginUser.value||'').trim(); const pass = els.loginPass.value||''; if(!user || !pass) return;
    try{
      const r = await fetch('/api/login', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({username: user, password: pass}) });
  if(r.ok){ const data = await r.json(); if(data && data.token){ localStorage.setItem('jwt', data.token); els.authToken.value = data.token; addLog('Login successful'); await loadCustoms(); await fetchCurrentUser(); } else addLog('login: no token'); }
      else { const txt = await r.text().catch(()=>'<no-body>'); addLog('login failed: '+txt); }
    }catch(e){ addLog('login error: '+(e && e.message)); }
  });

  els.registerBtn.addEventListener('click', async ()=>{
    const user = (els.loginUser.value||'').trim(); const pass = els.loginPass.value||''; if(!user || !pass) return;
    try{
      const r = await fetch('/api/register', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({username: user, password: pass}) });
  if(r.ok){ const data = await r.json(); if(data && data.token){ localStorage.setItem('jwt', data.token); els.authToken.value = data.token; addLog('Registered and logged in'); await loadCustoms(); await fetchCurrentUser(); } else addLog('register: no token'); }
      else { const txt = await r.text().catch(()=>'<no-body>'); addLog('register failed: '+txt); }
    }catch(e){ addLog('register error: '+(e && e.message)); }
  });

  els.copyTokenBtn.addEventListener('click', ()=>{
    try{ navigator.clipboard.writeText(els.authToken.value||''); addLog('Token copied to clipboard'); }catch(e){ addLog('Copy failed'); }
  });


  // wire events
  els.connectBtn.addEventListener('click', connect);
  els.disconnectBtn.addEventListener('click', disconnect);
  els.sendBtn.addEventListener('click', sendMessage);
  els.sendCommandBtn.addEventListener('click', sendCommand);
    // settings buttons
    els.loadSettingsBtn = document.getElementById('loadSettingsBtn');
    els.saveSettingsBtn = document.getElementById('saveSettingsBtn');
    els.loadSettingsBtn.addEventListener('click', loadSettings);
    els.saveSettingsBtn.addEventListener('click', saveSettings);
  els.clearLogsBtn.addEventListener('click', clearLogs);
  els.downloadLogsBtn.addEventListener('click', downloadLogs);
  els.persistLogs.addEventListener('change', () => { if(!els.persistLogs.checked) localStorage.removeItem('botLogs'); });

  // enable enter to send
  els.messageInput.addEventListener('keydown', (e) => { if(e.key === 'Enter') sendMessage(); });

  // load saved UI state
  window.addEventListener('load', () => {
  els.wsUrl.value = localStorage.getItem('wsUrl') || 'ws://localhost:3000';
    els.autoReconnect.checked = localStorage.getItem('autoReconnect') === '1';
    els.persistLogs.checked = localStorage.getItem('persistLogs') === '1';
    els.authToken.value = localStorage.getItem('authToken') || '';
    loadCustoms();
    if(els.persistLogs.checked) loadLogs();
    setStatus(false);
    fetchCurrentUser();
  });
  window.addEventListener('beforeunload', () => {
    localStorage.setItem('wsUrl', els.wsUrl.value);
    localStorage.setItem('autoReconnect', els.autoReconnect.checked ? '1' : '0');
    localStorage.setItem('persistLogs', els.persistLogs.checked ? '1' : '0');
    localStorage.setItem('authToken', els.authToken.value || '');
  });

})();
